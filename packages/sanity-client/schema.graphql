schema {
	query: RootQuery
}

"""
Field is a "raw" JSON alias for a different field
"""
directive @jsonAlias(
	"""
	Source field name
	"""
	for: String!
) on FIELD_DEFINITION

"""
Field references one or more documents
"""
directive @reference on FIELD_DEFINITION

type AboutItem {
	_key: String
	_type: String
	aboutImage: ImageWithAlt
	contentRaw: JSON
	subheading: String
}

input AboutItemFilter {
	_key: StringFilter
	_type: StringFilter
	aboutImage: ImageWithAltFilter
	subheading: StringFilter
}

input AboutItemSorting {
	_key: SortOrder
	_type: SortOrder
	aboutImage: ImageWithAltSorting
	subheading: SortOrder
}

type AboutPage implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	sections: [AboutItem]
}

input AboutPageFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
}

input AboutPageSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
}

type Author implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	bioRaw: JSON
	image: Image
	name: String
	slug: Slug
}

input AuthorFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	image: ImageFilter
	name: StringFilter
	slug: SlugFilter
}

input AuthorSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	image: ImageSorting
	name: SortOrder
	slug: SlugSorting
}

type Block {
	_key: String
	_type: String
	children: [Span]
	list: String
	style: String
}

union BlockOrImage = Block | Image

input BooleanFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: Boolean

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: Boolean
}

type Category implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	description: String
	title: String
}

input CategoryFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	description: StringFilter
	title: StringFilter
}

input CategorySorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	description: SortOrder
	title: SortOrder
}

type CollectionCardItem {
	_key: String
	_type: String
	href: String
	image: ImageWithAlt
	label: String

	"""
	How many columns should this item span?
	"""
	span: String
}

input CollectionCardItemFilter {
	_key: StringFilter
	_type: StringFilter
	href: StringFilter
	image: ImageWithAltFilter
	label: StringFilter
	span: StringFilter
}

input CollectionCardItemSorting {
	_key: SortOrder
	_type: SortOrder
	href: SortOrder
	image: ImageWithAltSorting
	label: SortOrder
	span: SortOrder
}

type CrossDatasetReference {
	_dataset: String
	_key: String
	_projectId: String
	_ref: String
	_type: String
	_weak: Boolean
}

input CrossDatasetReferenceFilter {
	_dataset: StringFilter
	_key: StringFilter
	_projectId: StringFilter
	_ref: StringFilter
	_type: StringFilter
	_weak: BooleanFilter
}

input CrossDatasetReferenceSorting {
	_dataset: SortOrder
	_key: SortOrder
	_projectId: SortOrder
	_ref: SortOrder
	_type: SortOrder
	_weak: SortOrder
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: Date

	"""
	Checks if the value is greater than the given input.
	"""
	gt: Date

	"""
	Checks if the value is greater than or equal to the given input.
	"""
	gte: Date

	"""
	Checks if the value is lesser than the given input.
	"""
	lt: Date

	"""
	Checks if the value is lesser than or equal to the given input.
	"""
	lte: Date

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DatetimeFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: DateTime

	"""
	Checks if the value is greater than the given input.
	"""
	gt: DateTime

	"""
	Checks if the value is greater than or equal to the given input.
	"""
	gte: DateTime

	"""
	Checks if the value is lesser than the given input.
	"""
	lt: DateTime

	"""
	Checks if the value is lesser than or equal to the given input.
	"""
	lte: DateTime

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: DateTime
}

"""
A Sanity document
"""
interface Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
}

input DocumentFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
}

input DocumentSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
}

type FaqItem {
	_key: String
	_type: String
	answerRaw: JSON
	question: String
}

input FaqItemFilter {
	_key: StringFilter
	_type: StringFilter
	question: StringFilter
}

input FaqItemSorting {
	_key: SortOrder
	_type: SortOrder
	question: SortOrder
}

type FaqPage implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	faqs: [FaqItem]
	heroImage: ImageWithAlt
}

input FaqPageFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	heroImage: ImageWithAltFilter
}

input FaqPageSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	heroImage: ImageWithAltSorting
}

type File {
	_key: String
	_type: String
	asset: SanityFileAsset
}

input FileFilter {
	_key: StringFilter
	_type: StringFilter
	asset: SanityFileAssetFilter
}

input FileSorting {
	_key: SortOrder
	_type: SortOrder
}

input FloatFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: Float

	"""
	Checks if the value is greater than the given input.
	"""
	gt: Float

	"""
	Checks if the value is greater than or equal to the given input.
	"""
	gte: Float

	"""
	Checks if the value is lesser than the given input.
	"""
	lt: Float

	"""
	Checks if the value is lesser than or equal to the given input.
	"""
	lte: Float

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: Float
}

type Geopoint {
	_key: String
	_type: String
	alt: Float
	lat: Float
	lng: Float
}

input GeopointFilter {
	_key: StringFilter
	_type: StringFilter
	alt: FloatFilter
	lat: FloatFilter
	lng: FloatFilter
}

input GeopointSorting {
	_key: SortOrder
	_type: SortOrder
	alt: SortOrder
	lat: SortOrder
	lng: SortOrder
}

type HomePage implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	descriptionRaw: JSON
	heading: [String]
	heroImage: ImageWithAlt
	themeCards: [ThemeCardItem]
}

input HomePageFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	heroImage: ImageWithAltFilter
}

input HomePageSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	heroImage: ImageWithAltSorting
}

input IDFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: ID
	in: [ID!]

	"""
	Checks if the value matches the given word/words.
	"""
	matches: ID

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: ID
	nin: [ID!]
}

type Image {
	_key: String
	_type: String
	asset: SanityImageAsset
	crop: SanityImageCrop
	hotspot: SanityImageHotspot
}

input ImageFilter {
	_key: StringFilter
	_type: StringFilter
	asset: SanityImageAssetFilter
	crop: SanityImageCropFilter
	hotspot: SanityImageHotspotFilter
}

input ImageSorting {
	_key: SortOrder
	_type: SortOrder
	crop: SanityImageCropSorting
	hotspot: SanityImageHotspotSorting
}

type ImageWithAlt {
	_key: String
	_type: String
	alt: String
	asset: SanityImageAsset
	crop: SanityImageCrop
	hotspot: SanityImageHotspot
}

input ImageWithAltFilter {
	_key: StringFilter
	_type: StringFilter
	alt: StringFilter
	asset: SanityImageAssetFilter
	crop: SanityImageCropFilter
	hotspot: SanityImageHotspotFilter
}

input ImageWithAltSorting {
	_key: SortOrder
	_type: SortOrder
	alt: SortOrder
	crop: SanityImageCropSorting
	hotspot: SanityImageHotspotSorting
}

input IntFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: Int

	"""
	Checks if the value is greater than the given input.
	"""
	gt: Int

	"""
	Checks if the value is greater than or equal to the given input.
	"""
	gte: Int

	"""
	Checks if the value is lesser than the given input.
	"""
	lt: Int

	"""
	Checks if the value is lesser than or equal to the given input.
	"""
	lte: Int

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Post implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	author: Author
	bodyRaw: JSON
	categories: [Category]
	mainImage: ImageWithAlt
	publishedAt: DateTime
	slug: Slug
	title: String
}

input PostFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	author: AuthorFilter
	mainImage: ImageWithAltFilter
	publishedAt: DatetimeFilter
	slug: SlugFilter
	title: StringFilter
}

input PostSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	mainImage: ImageWithAltSorting
	publishedAt: SortOrder
	slug: SlugSorting
	title: SortOrder
}

type RootQuery {
	AboutPage(
		"""
		AboutPage document ID
		"""
		id: ID!
	): AboutPage
	Author(
		"""
		Author document ID
		"""
		id: ID!
	): Author
	Category(
		"""
		Category document ID
		"""
		id: ID!
	): Category
	Document(
		"""
		Document document ID
		"""
		id: ID!
	): Document
	FaqPage(
		"""
		FaqPage document ID
		"""
		id: ID!
	): FaqPage
	HomePage(
		"""
		HomePage document ID
		"""
		id: ID!
	): HomePage
	Post(
		"""
		Post document ID
		"""
		id: ID!
	): Post
	SanityFileAsset(
		"""
		SanityFileAsset document ID
		"""
		id: ID!
	): SanityFileAsset
	SanityImageAsset(
		"""
		SanityImageAsset document ID
		"""
		id: ID!
	): SanityImageAsset
	TestimonialsPage(
		"""
		TestimonialsPage document ID
		"""
		id: ID!
	): TestimonialsPage
	ThemePage(
		"""
		ThemePage document ID
		"""
		id: ID!
	): ThemePage
	allAboutPage(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [AboutPageSorting!]
		where: AboutPageFilter
	): [AboutPage!]!
	allAuthor(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [AuthorSorting!]
		where: AuthorFilter
	): [Author!]!
	allCategory(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [CategorySorting!]
		where: CategoryFilter
	): [Category!]!
	allDocument(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [DocumentSorting!]
		where: DocumentFilter
	): [Document!]!
	allFaqPage(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [FaqPageSorting!]
		where: FaqPageFilter
	): [FaqPage!]!
	allHomePage(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [HomePageSorting!]
		where: HomePageFilter
	): [HomePage!]!
	allPost(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [PostSorting!]
		where: PostFilter
	): [Post!]!
	allSanityFileAsset(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [SanityFileAssetSorting!]
		where: SanityFileAssetFilter
	): [SanityFileAsset!]!
	allSanityImageAsset(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [SanityImageAssetSorting!]
		where: SanityImageAssetFilter
	): [SanityImageAsset!]!
	allTestimonialsPage(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [TestimonialsPageSorting!]
		where: TestimonialsPageFilter
	): [TestimonialsPage!]!
	allThemePage(
		"""
		Max documents to return
		"""
		limit: Int

		"""
		Offset at which to start returning documents from
		"""
		offset: Int
		sort: [ThemePageSorting!]
		where: ThemePageFilter
	): [ThemePage!]!
}

type SanityAssetSourceData {
	_key: String
	_type: String

	"""
	The unique ID for the asset within the originating source so you can programatically find back to it
	"""
	id: String

	"""
	A canonical name for the source this asset is originating from
	"""
	name: String

	"""
	A URL to find more information about this asset in the originating source
	"""
	url: String
}

input SanityAssetSourceDataFilter {
	_key: StringFilter
	_type: StringFilter
	id: StringFilter
	name: StringFilter
	url: StringFilter
}

input SanityAssetSourceDataSorting {
	_key: SortOrder
	_type: SortOrder
	id: SortOrder
	name: SortOrder
	url: SortOrder
}

type SanityFileAsset implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	altText: String
	assetId: String
	description: String
	extension: String
	label: String
	mimeType: String
	originalFilename: String
	path: String
	sha1hash: String
	size: Float
	source: SanityAssetSourceData
	title: String
	url: String
}

input SanityFileAssetFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	altText: StringFilter
	assetId: StringFilter
	description: StringFilter
	extension: StringFilter
	label: StringFilter
	mimeType: StringFilter
	originalFilename: StringFilter
	path: StringFilter
	sha1hash: StringFilter
	size: FloatFilter
	source: SanityAssetSourceDataFilter
	title: StringFilter
	url: StringFilter
}

input SanityFileAssetSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	altText: SortOrder
	assetId: SortOrder
	description: SortOrder
	extension: SortOrder
	label: SortOrder
	mimeType: SortOrder
	originalFilename: SortOrder
	path: SortOrder
	sha1hash: SortOrder
	size: SortOrder
	source: SanityAssetSourceDataSorting
	title: SortOrder
	url: SortOrder
}

type SanityImageAsset implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	altText: String
	assetId: String
	description: String
	extension: String
	label: String
	metadata: SanityImageMetadata
	mimeType: String
	originalFilename: String
	path: String
	sha1hash: String
	size: Float
	source: SanityAssetSourceData
	title: String
	uploadId: String
	url: String
}

input SanityImageAssetFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	altText: StringFilter
	assetId: StringFilter
	description: StringFilter
	extension: StringFilter
	label: StringFilter
	metadata: SanityImageMetadataFilter
	mimeType: StringFilter
	originalFilename: StringFilter
	path: StringFilter
	sha1hash: StringFilter
	size: FloatFilter
	source: SanityAssetSourceDataFilter
	title: StringFilter
	uploadId: StringFilter
	url: StringFilter
}

input SanityImageAssetSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	altText: SortOrder
	assetId: SortOrder
	description: SortOrder
	extension: SortOrder
	label: SortOrder
	metadata: SanityImageMetadataSorting
	mimeType: SortOrder
	originalFilename: SortOrder
	path: SortOrder
	sha1hash: SortOrder
	size: SortOrder
	source: SanityAssetSourceDataSorting
	title: SortOrder
	uploadId: SortOrder
	url: SortOrder
}

type SanityImageCrop {
	_key: String
	_type: String
	bottom: Float
	left: Float
	right: Float
	top: Float
}

input SanityImageCropFilter {
	_key: StringFilter
	_type: StringFilter
	bottom: FloatFilter
	left: FloatFilter
	right: FloatFilter
	top: FloatFilter
}

input SanityImageCropSorting {
	_key: SortOrder
	_type: SortOrder
	bottom: SortOrder
	left: SortOrder
	right: SortOrder
	top: SortOrder
}

type SanityImageDimensions {
	_key: String
	_type: String
	aspectRatio: Float
	height: Float
	width: Float
}

input SanityImageDimensionsFilter {
	_key: StringFilter
	_type: StringFilter
	aspectRatio: FloatFilter
	height: FloatFilter
	width: FloatFilter
}

input SanityImageDimensionsSorting {
	_key: SortOrder
	_type: SortOrder
	aspectRatio: SortOrder
	height: SortOrder
	width: SortOrder
}

type SanityImageHotspot {
	_key: String
	_type: String
	height: Float
	width: Float
	x: Float
	y: Float
}

input SanityImageHotspotFilter {
	_key: StringFilter
	_type: StringFilter
	height: FloatFilter
	width: FloatFilter
	x: FloatFilter
	y: FloatFilter
}

input SanityImageHotspotSorting {
	_key: SortOrder
	_type: SortOrder
	height: SortOrder
	width: SortOrder
	x: SortOrder
	y: SortOrder
}

type SanityImageMetadata {
	_key: String
	_type: String
	blurHash: String
	dimensions: SanityImageDimensions
	hasAlpha: Boolean
	isOpaque: Boolean
	location: Geopoint
	lqip: String
	palette: SanityImagePalette
}

input SanityImageMetadataFilter {
	_key: StringFilter
	_type: StringFilter
	blurHash: StringFilter
	dimensions: SanityImageDimensionsFilter
	hasAlpha: BooleanFilter
	isOpaque: BooleanFilter
	location: GeopointFilter
	lqip: StringFilter
	palette: SanityImagePaletteFilter
}

input SanityImageMetadataSorting {
	_key: SortOrder
	_type: SortOrder
	blurHash: SortOrder
	dimensions: SanityImageDimensionsSorting
	hasAlpha: SortOrder
	isOpaque: SortOrder
	location: GeopointSorting
	lqip: SortOrder
	palette: SanityImagePaletteSorting
}

type SanityImagePalette {
	_key: String
	_type: String
	darkMuted: SanityImagePaletteSwatch
	darkVibrant: SanityImagePaletteSwatch
	dominant: SanityImagePaletteSwatch
	lightMuted: SanityImagePaletteSwatch
	lightVibrant: SanityImagePaletteSwatch
	muted: SanityImagePaletteSwatch
	vibrant: SanityImagePaletteSwatch
}

input SanityImagePaletteFilter {
	_key: StringFilter
	_type: StringFilter
	darkMuted: SanityImagePaletteSwatchFilter
	darkVibrant: SanityImagePaletteSwatchFilter
	dominant: SanityImagePaletteSwatchFilter
	lightMuted: SanityImagePaletteSwatchFilter
	lightVibrant: SanityImagePaletteSwatchFilter
	muted: SanityImagePaletteSwatchFilter
	vibrant: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSorting {
	_key: SortOrder
	_type: SortOrder
	darkMuted: SanityImagePaletteSwatchSorting
	darkVibrant: SanityImagePaletteSwatchSorting
	dominant: SanityImagePaletteSwatchSorting
	lightMuted: SanityImagePaletteSwatchSorting
	lightVibrant: SanityImagePaletteSwatchSorting
	muted: SanityImagePaletteSwatchSorting
	vibrant: SanityImagePaletteSwatchSorting
}

type SanityImagePaletteSwatch {
	_key: String
	_type: String
	background: String
	foreground: String
	population: Float
	title: String
}

input SanityImagePaletteSwatchFilter {
	_key: StringFilter
	_type: StringFilter
	background: StringFilter
	foreground: StringFilter
	population: FloatFilter
	title: StringFilter
}

input SanityImagePaletteSwatchSorting {
	_key: SortOrder
	_type: SortOrder
	background: SortOrder
	foreground: SortOrder
	population: SortOrder
	title: SortOrder
}

input Sanity_DocumentFilter {
	"""
	All documents that are drafts.
	"""
	is_draft: Boolean

	"""
	All documents referencing the given document ID.
	"""
	references: ID
}

type Slug {
	_key: String
	_type: String
	current: String
	source: String
}

input SlugFilter {
	_key: StringFilter
	_type: StringFilter
	current: StringFilter
	source: StringFilter
}

input SlugSorting {
	_key: SortOrder
	_type: SortOrder
	current: SortOrder
	source: SortOrder
}

enum SortOrder {
	"""
	Sorts on the value in ascending order.
	"""
	ASC

	"""
	Sorts on the value in descending order.
	"""
	DESC
}

type Span {
	_key: String
	_type: String
	marks: [String]
	text: String
}

input StringFilter {
	"""
	Checks if the value is equal to the given input.
	"""
	eq: String
	in: [String!]

	"""
	Checks if the value matches the given word/words.
	"""
	matches: String

	"""
	Checks if the value is not equal to the given input.
	"""
	neq: String
	nin: [String!]
}

type TestimonialItem {
	_key: String
	_type: String
	author: String
	quoteRaw: JSON
	testimonialImage: ImageWithAlt
}

input TestimonialItemFilter {
	_key: StringFilter
	_type: StringFilter
	author: StringFilter
	testimonialImage: ImageWithAltFilter
}

input TestimonialItemSorting {
	_key: SortOrder
	_type: SortOrder
	author: SortOrder
	testimonialImage: ImageWithAltSorting
}

type TestimonialsPage implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	heroImage: ImageWithAlt
	testimonials: [TestimonialItem]
}

input TestimonialsPageFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	heroImage: ImageWithAltFilter
}

input TestimonialsPageSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	heroImage: ImageWithAltSorting
}

type ThemeCardItem {
	_key: String
	_type: String
	heading: String
	href: String
	image: ImageWithAlt
	label: String
	theme: String
}

input ThemeCardItemFilter {
	_key: StringFilter
	_type: StringFilter
	heading: StringFilter
	href: StringFilter
	image: ImageWithAltFilter
	label: StringFilter
	theme: StringFilter
}

input ThemeCardItemSorting {
	_key: SortOrder
	_type: SortOrder
	heading: SortOrder
	href: SortOrder
	image: ImageWithAltSorting
	label: SortOrder
	theme: SortOrder
}

type ThemePage implements Document {
	"""
	Date the document was created
	"""
	_createdAt: DateTime

	"""
	Document ID
	"""
	_id: ID
	_key: String

	"""
	Current document revision
	"""
	_rev: String

	"""
	Document type
	"""
	_type: String

	"""
	Date the document was last modified
	"""
	_updatedAt: DateTime
	collectionCards: [CollectionCardItem]
	theme: String
}

input ThemePageFilter {
	"""
	Apply filters on document level
	"""
	_: Sanity_DocumentFilter
	_createdAt: DatetimeFilter
	_id: IDFilter
	_key: StringFilter
	_rev: StringFilter
	_type: StringFilter
	_updatedAt: DatetimeFilter
	theme: StringFilter
}

input ThemePageSorting {
	_createdAt: SortOrder
	_id: SortOrder
	_key: SortOrder
	_rev: SortOrder
	_type: SortOrder
	_updatedAt: SortOrder
	theme: SortOrder
}
